
Thank your for post Graham; that is similar to my earlier [experimental branch](https://github.com/docker-solr/docker-solr/pull/130).

You write:

> There is no risk running it as group root, it doesn't grant the process any special privileges

Well, the Solr server now has the ability to write to `/etc/passwd` (and perhaps some files in `/sys`?), which it didn't before. We can debate how likely that attack vector is (perhaps not very) and what the consequential risk is in that event (nothing I can think of in this image), and trade that off against the  benefits; but I don't particularly like it.


> It ... is slowly becoming accepted practice

Where?

The best practices doc does not mention this (https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#entrypoint, https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user)
Is there a precedent for this pattern in any of the  https://github.com/docker-library/official-images ?

Docker library maintainer @tianon [commented](https://github.com/docker-solr/docker-solr/pull/130#issuecomment-325778587) referenced images using `gosu` as an example, mentioned --user as being more secure (not running as root at all), and recommended explicity against the passwd modification at run time.

I had a look at images using `gosu`, and the pattern there seems to be: "By default run as root, then chown, drop privs, then use gosu to run the app with the service user; if run as non-root, just run and expect required permissions to have been set in volumes". I can understand that that is better than running as root; but docker-solr has never run as root. And with regards to arbitrary uids, there you do not run as root, so this only works when all the writable places are directories where you can mount properly-owned volumes. Which is the same as Solr now (where that is problematic because not all places are empty directories). So unless I'm missing something, I'm not really loving this either.

Just to doublecheck -- @GrahamDumpleton do the gosu-based official images work in OpenShift (eg `rabbitmq`, `cassandra`, `postgres`) or do you have custom images?

The gosu approach would be a breaking change for existing docker-solr users in one other way: if you use the initdb and rely on being solr there, you now won't be and can experience breakage. This is probably uncommon.


I've made some changes to Graham's example, on branch [issue126-group-root](https://github.com/docker-solr/docker-solr/tree/issue126-arbitrary-uid):
- provide an environment opt-out for the passwd modification
- cater for the case where the passwd may already contain the user id
- move the fix-permission around during build so you don't run into "text file busy" problems
- Changed fix-permission script to exit on failure
- made the scripts compatible with Alpine
- made the scripts shellcheck-compliant
- adjusted the now-failing tests (where a 100 uid and group is specified) to not set the group
- updated all flavours

which passed tests, and allows for experimentation.

Under this scheme there is one existing scenario that breaks:

```
docker run \
  -v "$PWD/mycore:/opt/solr/server/solr/mycore" \
  -v "$PWD/myconf:/opt/solr/server/solr/mycore/conf:ro" \
  -v "$PWD/mylogs:/opt/solr/server/logs" \
  --user "$(id -u):$(id -g)" \
  --name "$container_name" \
  docker-solr/docker-solr:7.2.1
```

which unfortunately happens to be the very thing we currently recommend for the common use-case where we want to run from their own directories; we even have a test for it. These users would now have to either run with group root, or do:

```
docker run \
  -v "$PWD/mycore:/opt/solr/server/solr/mycore" \
  -v "$PWD/myconf:/opt/solr/server/solr/mycore/conf:ro" \
  -v "$PWD/mylogs:/opt/solr/server/logs" \
  --user "$(id -u):$(id -g)" \
  --name "$container_name" \
  -e CHANGE_ETC_PASSWD=no \
  docker-solr/docker-solr:7.2.1
```

So, because of the passwd unpleasantness and the broken backwards compatibility, plus the different patterns in other images I've been on the fence about this one.

Now maybe I can be convinced that we need to bite the bullet on a backwards compatibility break for the greater good, with either `root-group` or `gosu` approach; but then I want to make sure we do it in a way that fits the other official images and will be accepted by the library team, and will work for both OpenShift and other user-cases, and is not going to have to change again in 6 months time.
